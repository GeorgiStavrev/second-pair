name: Deploy to TEST on Pull Request
on: pull_request

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  JWT_SECRET: ${{ secrets.SERVICE_JWT_SECRET_TEST }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
  FIREBASE_SVC_ACC_CREDS: ${{ secrets.FIREBASE_SVC_ACC_CREDS_TEST }}
  GIT_SHA: ${{ github.event.pull_request.head.sha }}
  TF_VAR_git_sha: ${{ github.event.pull_request.head.sha }}
  TF_VAR_slack_webhook_alarms: ${{ secrets.SLACK_ALARMS_WEBHOOK_URL }}

  ECS_CLUSTER: shared-cluster
  ECS_SERVICE: test-second-pair-test
jobs:
  terraform:
    name: Deploy to TEST
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Create Firebase service account credentials file
        working-directory: ./src
        run: echo "${FIREBASE_SVC_ACC_CREDS}" > firebaseServiceAccountCredentials.json

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.8

      - name: Upload new image to ECR on TEST
        working-directory: ./src
        run: REPO_NAME=test-second-pair make deploy-aws-test

      - name: Terraform Apply to TEST Environment
        working-directory: ./iac
        run: APPLY_ARGS="-auto-approve" make apply-test

      - name: Wait for deployment to stabilize
        run: |
          aws ecs wait services-stable --cluster $ECS_CLUSTER --service $ECS_SERVICE --region $AWS_DEFAULT_REGION
